[{"categories":["SpringCloud"],"content":"微服务入门—微服务架构的前世今生 此文转载自哈喽沃德先生，处于小白学习阶段，手打去感悟理解，加入自己的理解，在此感谢大佬。 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:0:0","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"互联网发展史 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:1:0","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"Web1.0 　用户只能搜索和阅读网络信息。比如中国的几大门户网站：搜狐、新浪、网易、腾讯，平台提供内容和数据，用户被动接受，和用户缺乏交互。 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:1:1","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"Web2.0 ​ 用户能够创造内容，并分享在网路平台上跟大家进行互动，而不再只是单纯的访问者；这种范式的发展重新定义了市场和商业模式。比如QQ、天涯、微博、淘宝、美团、滴滴，提供一个平台，用户你们自己玩。用户需要注册，用户和平台交互变得很强，用户和用户之间可以交流，数据几乎由用户产生。 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:1:2","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"Web3.0 ​ 网络在接受信息的同时，通过数据分析，能够根据用户的喜好产生出新的数据和信息并推送给用户。比如网易云音乐的推荐，搜索引擎的推荐，淘宝的商品推荐，地图应用的出行规划，堵车预测等等。其特征是使用 web 2.0 时代所产生的大量数据，更加精准、实时和深入的为用户提供服务。一个简单的例子：当你在淘宝上买了某件商品后，订单下方会出现很多类似商品推送 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:1:3","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"总结 比如：你家楼下餐馆代表互联网，你饰演互联网用户。 WEB1.0时代：你晚上一进餐馆，老板给你上了一桌子菜，说兄弟都是你的吃吧！（不分析）你自己挨个尝试，因为你不知道哪个菜好吃。（缺乏交互） WEB2.0时代：你晚上一进餐馆，你说：老板来斤饺子。老板说：没有饺子有面条。你说来碗面条，老板给你上了一碗面条。（被动分析）或者，你不知道吃什么好，但是坐在你旁边的食客会告诉你哪个好吃。（用户交互） WEB3.0时代：你晚上一进餐馆，一进门老板就说：客官，来碗面条吧！你问为啥，老板说，你连续吃一礼拜面条了。（主动分析）WEB 3.0 是微服务、大数据、云计算、人工智能的时代。 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:1:4","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"技术架构演变 随着网站应用的规模扩大，系统架构随之演进：单体应用架构—\u003e垂直应用架构—\u003e分布式架构—\u003eSOA架构—\u003e微服务架构，还有悄然兴起的Service Mesh（服务网格化） ","date":"2021-07-23","objectID":"/springcloud_alibaba/:2:0","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"单体应用架构 通俗地讲，“单体应用（monolith application）”就是将应用程序的所有功能都打包成一个独立的单元。当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。 初期单体架构 在互联网应用初期，互联网用户数相对都较少，可以把web服务器(例如Tomcat)和数据库部署在同一台服务器上。浏览器往www.taobao.com发起请求时，首先经过DNS服务器（域名系统）把域名转换为实际IP地址10.102.4.1，浏览器转而访问该IP对应的Tomcat。 \" IP与端口 IP为网络中计算机的唯一标识，端口为计算机上某个应用的唯一标识,对应系统中的唯一进程 进程间通过不同协议进行通信，浏览器与Tomocat间通讯的协议为http协议；Tomcat与数据库间通讯的协议为TCP协议； 两者都是面向连接的协议,需要先建立连接才能通讯 UDP协议是一种无连接协议,简单理解为只做输出,不管接收端是否输入 注意 在单体架构下，随着用户数的增长，Tomcat和数据库之间竞争资源，单机性能不足以支撑业务. 存储资源与系统可用性不足 思考 从浏览器输入一个url到数据加载完成整个过程发生了什么？ 浏览器与tomcat进行通讯使用的什么协议，这个协议有什么特点？ Tomcat如何并发处理多个客户端的请求？ Tomcat中的应用是如何访问数据数据库的？ …….. ","date":"2021-07-23","objectID":"/springcloud_alibaba/:2:1","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"水平应用架构发展 Web服务与数据库分离 \" 特点 所有的功能集成在一个项目工程中； 所有的功能打一个 war 包部署到服务器； 应用与数据库分开部署； 通过部署应用集群和数据库集群来提高系统的性能。 优点 开发简单：一个 IDE 就可以快速构建单体应用； 便于共享：单个归档文件包含所有功能，便于在团队之间以及不同的部署阶段之间共享； 易于测试：单体应用一旦部署，所有的服务或特性就都可以使用了，这简化了测试过程，因为没有额外的依赖，每项测试都可以在部署完成后立刻开始； 容易部署：整个项目就一个 war 包，Tomcat 安装好之后，应用扔上去就行了。群化部署也很容易，多个 Tomcat + 一个 Nginx 分分钟搞定。 缺点 妨碍持续交付：随着时间的推移，单体应用可能会变得比较大，构建和部署时间也相应地延长，不利于频繁部署，阻碍持续交付。在移动应用开发中，这个问题会显得尤为严重； 不够灵活：随着项目的逐渐变大，整个开发流程的时间也会变得很长，即使在仅仅更改了一行代码的情况下，软件开发人员需要花费几十分钟甚至超过一个小时的时间对所有代码进行编译，并接下来花费大量的时间重新部署刚刚生成的产品，以验证自己的更改是否正确。如果多个开发人员共同开发一个应用程序，那么还要等待其他开发人员完成了各自的开发。这降低了团队的灵活性和功能交付频率； 受技术栈限制：项目变得越来越大的同时，我们的应用所使用的技术也会变得越来越多。这些技术有些是不兼容的，就比如在一个项目中大范围地混合使用 C++ 和 Java 几乎是不可能的事情。在这种情况下，我们就需要抛弃对某些不兼容技术的使用，而选择一种不是那么适合的技术来实现特定的功能。 可靠性差：某个环节出现了死循环，导致内存溢出，会影响整个项目挂掉。 伸缩性差：系统的扩容只能针对应用进行扩容，不能做到对某个功能进行扩容，扩容后必然带来资源浪费的问题。 技术债务：假设我的代码库中有一个混乱的模块结构。此时，我需要添加一个新功能。如果这个模块结构清晰，可能我只需要2天时间就可以添加好这个功能，但是如今这个模块的结构很混乱，所以我需要4天时间。多出来的这两天就是债务利息。随着时间推移、人员变动，技术债务必然也会随之增多。 注意 本次演进过程中，随着用户数的增长，并发读写数据库成为瓶颈 本地缓存和分布式缓存 在Tomcat同服务器上或同JVM中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。如图所示： \" ​ 其中涉及的技术包括：基于memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。 注意 ​ 缓存虽然抗住了大部分的访问请求，但随着用户数的增长，并发压力主要落在单机的Tomcat上，响应逐渐变慢。 反向代理与负载均衡设计 ​ 在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。此处假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发。其中涉及的技术包括：Nginx、HAProxy，如图所示： \" 注意 反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈。 数据库读写分离设计 把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。如图所示： \" 其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。 注意 业务逐渐变多，不同业务之间的访问量差距较大，不同业务直接竞争数据库，相互影响性能。 数据库按业务进行分库 把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。 \" 这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。 注意 对于这种方案，随着用户数的增长，单机的写库会逐渐会达到性能瓶颈。 大表拆分为小表 ​ 比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的Mycat也支持在大表拆分为小表情况下的访问控制。 \" ​ 这种做法显著的增加了数据库运维的难度，对DBA的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库，但是这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的，如分库分表的管理和请求分发，由Mycat实现，SQL的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等，这种架构其实是MPP（大架构的一类实现规模并行处理）。 注意 数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的Nginx会成为瓶颈。 LVS或F5让多个Nginx负载均衡 由于瓶颈在Nginx，因此无法通过两层的Nginx来实现多个Nginx的负载均衡。此时采用LVS和F5作为网络负载均衡解决方案，如图所示： \" ​ 其中LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。由于LVS是单机版的软件，若LVS所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。可使用keepalived软件模拟出虚拟IP，然后把虚拟IP绑定到多台LVS服务器上，浏览器访问虚拟IP时，会被路由器重定向到真实的LVS服务器，当主LVS服务器宕机时，keepalived软件会自动更新路由器中的路由表，把虚拟IP重定向到另外一台正常的LVS服务器，从而达到LVS服务器高可用的效果。 注意 此种方案中，由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同。 DNS轮询实现机房的负载均衡 ​ 在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。当用户访问www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡，至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。 \" 注意 随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求 ","date":"2021-07-23","objectID":"/springcloud_alibaba/:2:2","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["SpringCloud"],"content":"垂直应用架构发展 \" 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。 大应用拆分成小应用 ​ 按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决。 \" ","date":"2021-07-23","objectID":"/springcloud_alibaba/:2:3","tags":["SpringCloud"],"title":"SpringCloud_Alibaba","uri":"/springcloud_alibaba/"},{"categories":["Ares"],"content":"基于STS的Ares5.0工程开发 ","date":"2021-07-23","objectID":"/sts_ares/:0:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"Ares5.0开发环境搭建 ","date":"2021-07-23","objectID":"/sts_ares/:1:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"1.Node环境准备 安装NVM 使用NVM安装Node，可以方便的切换Node版本，安装NVM之前一定要卸载已安装的 NodeJS，否则会发生冲突。 NVM全名node.js version management，是一个node的版本管理工具 下载NVM，推荐使用安装包下载，如下图 \" 安装完成后命令行执行命令：nvm 成功出现以下代码 \" nvm off //禁用node.js版本管理(不卸载任何东西) nvm on //启用node.js版本管理 nvm install \u003cversion\u003e //安装node.js的命名 version是版本号 例如：nvm install 8.12.0 nvm uninstall \u003cversion\u003e //卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用 nvm list //显示所有安装的node.js版本 nvm list available //显示可以安装的所有node.js的版本 nvm use \u003cversion\u003e //切换到使用指定的nodejs版本 配置淘宝镜像 由于nvm默认的下载地址http://nodejs.org/dist/是外国外服务器，速度非常慢，可以切换到淘宝镜像，加快下载速度 打开nvm的安装路径：D:\\software\\java_softwear\\nvm（我的地址），打开settings.txt，添加如下配置 root: D:\\software\\java_softwear\\nvm path: D:\\software\\java_softwear\\Node.js arch: 64 proxy: none node_mirror: http://npm.taobao.org/mirrors/node/ npm_mirror: https://npm.taobao.org/mirrors/npm/ 安装Node Ares中使用的版本是v12.10.0，安装命令如下： nvm install version nvm install v12.10.0 Installation complete 代表nodejs安装完成 切换nodejs版本 查询所有的nodejs版本：nvm list ，切换到要使用的版本（nvm use 12.10.0） \" 配置环境变量 为了全局使用nvm命令，就需要配置下环境变量,这里以win10为例: 环境变量：点击我的电脑···属性···高级系统设置···环境变量 删除系统变量： a. 找到系统变量删除系统自带的nvm变量：NVM_HOME和NVM_SYMLINK  b. 打开path：删除nvm自动添加的变量：Path = %NVM_HOME%;%NVM_SYMLINK% 配置用户变量： image-20210721201317732 \" 测试node，npm是否安装成功 依次执行node，npm命令，出现以下画面则安装成功 \" ","date":"2021-07-23","objectID":"/sts_ares/:1:1","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"2.全局安装进程 确认npm，node安装成功以后，执行如下命令： node install pm2 -g ","date":"2021-07-23","objectID":"/sts_ares/:1:2","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"3.全局安装gulp 执行如下命令安装自动化构建工具gulp： npm install gulp-cli -g ","date":"2021-07-23","objectID":"/sts_ares/:1:3","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"4.安装插件 安装STS工具（sts-4.7.1.RELEASE），可在公司内网或Spring官网下载； 将 YTStudio*.jar 复制到 sts/plugins 目录中。安装完毕后，打开 STS（或重启STS），即可使用。（新版本插件至少在YTStudio4以上） \" \" ","date":"2021-07-23","objectID":"/sts_ares/:1:4","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"5.公共环境模板配置 \" 下载 ares*.zip将 ares.zip 解压到本地的 系统⽤户根⽬录即当前默认用户（C:\\Users\\曹盟杰\\ares）下 ，ares目录如下图所示： \" 切换到ares目录下，打开cmd，执行命令：npm install，执行成功以后，生成如下文件 \" ","date":"2021-07-23","objectID":"/sts_ares/:1:5","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"6.Maven配置 修改Maven本地库地址setting文件中localRepository标签： D:\\software\\java_softwear\\apache-maven-3.5.0\\apache-maven-3.5.0\\conf \u003clocalRepository\u003eD:/YtJavaDev\u003c/localRepository\u003e 打开STS，选择Window -\u003e Preferences -\u003e Maven,设置如下： \" ","date":"2021-07-23","objectID":"/sts_ares/:1:6","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"7.STS优化配置 编码配置（window-prefrences-General-workspace），工程编码设置为UTF-8 编译时校验功能关闭，提高STS速度：window-prefrences-vaildation-build一列全部去掉 安装properties插件，将配置文件ASCII码转换成中文 1.下载离线安装文件：http://sourceforge.jp/projects/propedit/downloads/40156/jp.gr.java_conf.ussiy.app.propedit_5.3.3.zip/ 2.安装与检验: 将得到的文件直接解压，可得到这样一个文件夹 jp.gr.java_conf.ussiy.app.propedit_5.3.3 ，直接将该文件夹复制到 STS插件目录下。 3.重启Eclipse。 4.选中 *.properties 文件，右键 - Open With ，你会看到多了一个 PropertiesEditor 子菜单。 5.将PropertiesEditor设为默认的打开方式 工具栏-\u003eWindow-\u003ePreferences-\u003eGeneral-\u003eEditors-\u003eFile Associations,添加一个*.properties。 下方的 Associated editors 栏里有 PropertiesEditor 项，选中，点击 Default 按钮。 双击properties文件默认就会用PropEditor打开。 SVN目录忽略设置 \" ","date":"2021-07-23","objectID":"/sts_ares/:1:7","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"8.导入工程 本地导入： \" \" SVN导入需连接公司内网： \" \" \" ","date":"2021-07-23","objectID":"/sts_ares/:1:8","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"Ares5.0应用架构说明 Ares5.0标准版采用微服务模式开发，前端通过微服务网关（gateway）访问后台微服务。 微服务网关（gateway）和微服务之间采用dubbo进行通信（可支持http） \" \" ","date":"2021-07-23","objectID":"/sts_ares/:2:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"工程说明 ","date":"2021-07-23","objectID":"/sts_ares/:3:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"基本结构 \" ares-mmc-platform：后管服务 ","date":"2021-07-23","objectID":"/sts_ares/:3:1","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"工程jar包依赖 \" ","date":"2021-07-23","objectID":"/sts_ares/:3:2","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"网关（ares-mobile-gateway）执行时序 \" ","date":"2021-07-23","objectID":"/sts_ares/:3:3","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"cust渠道整合工程 \" dubbo.properties #dubbo服务注册中心 #测试环境 dubbo.registry.address=zookeeper://192.168.0.171:2181 #本机环境 dubbo.registry.address=zookeeper://127.0.0.1:2181 #dubbo注册中心组名称要与网关（getway）注册中心组配置名称一致 #dubbo.registry.group=ares.inte dubbo.registry.group=dubbo jdbc.properties #公司测试环境 jdbc.url=jdbc:mysql://192.168.0.141:3306/inte?useUnicode=true\u0026characterEncoding=utf8\u0026autoReconnect=true\u0026failOverReadOnly=false ","date":"2021-07-23","objectID":"/sts_ares/:3:4","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"IBusinessContext 数据总线作用 总线在接受交易请求时创建；各组件通过数据总线进行数据存取交互；请求结束，数据总线销毁； 数据以Map\u003cString,Object\u003e或List\u003cMap\u003cString,Object\u003e\u003e等对象方式保存在总线中； 顶层结构为Map，包含头区、请求区、会话区、缓存区等数据区块； 会话区数据不能通过交易请求字段生成；调用通讯时请求中包含SESS_的数据为非法数据。 数据结构示意如下: \" 1.头区 KEY以 H_ 开头，如 H_SEQ API public Map getHeadMap(); public String getHeadMap(String name); public void setHead(String name,String value); 示例 String seq = ctx.getHead(\"H_SEQ\"); 或者表达式${H_SEQ} 2.请求区 API public \u003cT\u003e T getParam(String xpath); public \u003cT\u003e T getParam(String xpath,Object def); public boolean setParam(String name, Object data); public Map getParamMap(); 示例 String acctNo = ctx.getParam(\"ACCT_NO\"); int num = ctx.getParam(\"NUM\",0); boolean flag = ctx.getParam(\"FLAG\",false); //或者表达式${ACCT_NO} 3.会话区 数据在会话期间有效；KEY以SESS_开头，如：SESS_USER_NO; 只能在组件或者代码中创建 API //获取会话 public \u003cT\u003e T getSessionObject(String name); //保存会话 public void saveSessionObject(String name, Object obj); 示例 String userId = ctx.getSessionObject(\"SESS_USER_NO\"); //或者表达式${SESS_USER_NO} 4.缓存区 数据在临时缓存中，如：一次性会话生成，默认有效时长为120s； API public \u003cT\u003e T getSessCache(String key); public void setCacheService(ICacheService cacheService); 示例 String imgCode = ctx.getSessCache(\"CACHE_IMAGE_CODE\"); //或者表达式${CACHE_IMAGE_CODE} ","date":"2021-07-23","objectID":"/sts_ares/:3:5","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"组件说明 ","date":"2021-07-23","objectID":"/sts_ares/:4:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"后台接口服务开发流程 \" ","date":"2021-07-23","objectID":"/sts_ares/:5:0","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"1.新增接入服务 新增接入服务实际上就是利用封装工具自动生成Java类和规范输入输出字段 启动cust应用服务，切换到接入服务选项卡，点击新增接入服务 \" \" 每项服务都是一个接口，接口开发完成在Ares交易测试平台模拟请求数据，进行单元测试 ","date":"2021-07-23","objectID":"/sts_ares/:5:1","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"2.定义报文 新增接入服务完成后，选择报文路径，定义输入输出字段，注意若接收List表单type必须取值为E \" \" \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003ctrans name=\"in/easy/sample10\" desc=\"交易示例-10-查询系统时间\"\u003e \u003csnd\u003e \u003cfield name=\"NUM\" desc=\"数字\" required=\"true\"/\u003e required=\"true\"表示测试必输项 \u003c/snd\u003e \u003crcv\u003e \u003cfield name=\"SYS_DATE\" desc=\"服务器日期\" /\u003e 保证数据能存入总线，报文属性名称要与Java类中放入总线的Key保持一致 \u003cfield name=\"FZINFO\" desc=\"分支提示信息\" /\u003e \u003c/rcv\u003e \u003c/trans\u003e ","date":"2021-07-23","objectID":"/sts_ares/:5:2","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"3.设计流程及业务逻辑 点击访问路径url，创建流程文件，每个组件都是流程图上的一个节点，线条可定义进入节点的条件，当一个功能业务逻辑比较复杂时，可以将一个服务（接口）拆分成多个任务节点实现，便于查看和维护。 拖拽组件设计完流程后，点击节点设置Java类名称，设置完成保存节点信息。根据beanId创建Java类 \" \" \" 参数IBusinessContext为数据总线,包含请求数据和将要返回的数据 @Service public class GetSysDateOp implements IAresSerivce { private Logger logger = LoggerFactory.getLogger(getClass()); @Override public int execute(IBusinessContext ctx) { // TODO Auto-generated method stub logger.debug(\"-简单任务-run--\"); String date = DateUtil.todayStr();//获取当前系统时间 ctx.setParam(\"SYS_DATE\", date);//将获取的时间放入数据总线中，KEY值要与报文定义的KEY值保持一致 return NEXT; } } 业务代码完成，如节点涉及到数据库操作，在接入服务窗口点击对应SQL链接，自动生成xml文件，编写sql语句，定位标识写到节点设置的数据转译区*sqlId即namespace.id 点击需同步接入信息服务 ","date":"2021-07-23","objectID":"/sts_ares/:5:3","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["Ares"],"content":"4. 交易服务测试 服务调试工具中找到对应服务，填入服务必填项测试是否返回所需数据 ","date":"2021-07-23","objectID":"/sts_ares/:5:4","tags":["Ares"],"title":"基于STS的Ares5.0工程开发","uri":"/sts_ares/"},{"categories":["数据库"],"content":"Mysql数据库入门 ","date":"2021-07-23","objectID":"/mysql/:0:0","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"概念 数据库(Database，DB)是按照数据结构来组织，存储和管理数据的仓库；底层以二维表形式保存数据的库就是关系型数据库关系型数据库；常见关系型数据库有Oracle(Oracle)、DB2(IBM)、SQL Server(MS)、MySQL(Oracle) ","date":"2021-07-23","objectID":"/mysql/:1:0","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"常见数据结构 MySQL支持多种类型，大致可以分为四类：数值型、浮点型、日期/时间和字符串(字符)类型 ","date":"2021-07-23","objectID":"/mysql/:2:0","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"数值型 \" ","date":"2021-07-23","objectID":"/mysql/:2:1","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"浮点型 \" ","date":"2021-07-23","objectID":"/mysql/:2:2","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"日期型 \" ","date":"2021-07-23","objectID":"/mysql/:2:3","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"字符型 \" ","date":"2021-07-23","objectID":"/mysql/:2:4","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"SQL语句 SQL ： Structured Query Language 结构化查询语言 SQL是在关系数据库上执行数据操作、检索及维护所使用的标准语言 可以用来查询数据，操纵数据，定义数据，控制数据 ","date":"2021-07-23","objectID":"/mysql/:3:0","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["数据库"],"content":"Sql语句分类 数据定义语言(DDL)：Data Definition Language 数据操纵语言(DML)：Data Manipulation Language 数据查询语言(DQL)：Data Query Language 数据控制语言(DCL)：Data Control Language 事务控制语言(TCL)：Transaction Control Language 数据定义语言—DDL create （database/tavble） 创建库 创建表 alter (table) 添加、删除、修改数据表字段（列） drop (database/table) 删除库 删除表 库相关 CREATEDATABASEmybase;CREATEDATABASEmybaseCHARACTERSETUTF8; SHOWDATABASES; SELECTDATABASE();#查看当前使用的数据库 ALTERDATABASEmybaseCHARACTERSETUTF8;修改数据库编码 DROPDATABASEmybase;#删除数据库 USEmybase;#切换数据库 表相关 #创建表createtableexam(idINT(11)PRIMARYKEYAUTO_INCREMENT,nameVARCHAR(20),EnglishINT,ChineseINT,Mathint); descexam;#查看表结构 droptableexam;#删除表 ALTERTABLEexamADDHistoryINTNOTNULL;#添加列 ALTER TABLE exam MODIFY History DOUBLE(7,2); #修改列的类型、长度、约束 ALTERTABLEexamCHANGEHistoryPhysicsINTNOTNULL;#修改表的列名 RENAMETABLEexamTOscore;#修改表名 ALTER TABLE score CHARACTER SET GBK; #修改表的字符集 ALTER TABLE score DROP Physics; #删除列 数据操作语言—DML update,insert,delete 插入部分列 INSERTINTOscore(id,NAME,English,Chinese,Math)VALUE(1,‘Hudie’,90,90,90); 插入所有列 INSERTINTOscoreVALUES(3,‘Shu’,80,80,80); 修改记录 UPDATEscoresetChinese=99;–全表修改UPDATEscoreSETMath=100WHEREid=‘1’; 删除记录 DELETEFROMscoreWHEREid=‘2’;DELETEFROMscore; 数据控制语言—DCL 数据控制语言DCL(grant,revoke)主要为用户授予和撤销权限 创建用户：CREATE USER 用户名@ip IDENTIFIED BY 密码; createuserFox@localhostidentifiedby‘123456’; 给用户授权:GRANT 权限1,权限2,…,权限n ON 数据库名.* TO 用户名@IP; grantselect,droponmysql.*toFox@localhost; 撤销权限:REVOKE 权限1，权限2，·····权限n ON 数据库名.* TO 用户名@IP; revoke select on mysql.* from Fox@localhost; 查看用户的权限:SHOW GRANTS FOR 用户名@IP show grants for Fox@localhost; 删除用户 drop user Fox@localhost; 数据查询语言—DQL SELECT 关键字： distinct as +-*/ like， and，or in /，not in between order by 聚合函数 group by limit SELECT*FROMexam;--全表查询 SELECTDISTINCTMathFROMexam;SELECTDISTINCTname,MathFROMexam;--过滤重复字段 SELECTNAME,EnglishASEnglish_scoreFROMexam;--字段起别名（as可省略） SELECTNAME,English,ChineseFROMexamWHERENAME=‘张三’;--查询指定字段 SELECTid,NAME,English-20AS_EnglishFROMexam;SELECTNAME,English+Math+ChineseFROMexam;--使用加减乘除 SELECTFROMexamWHERENAMELIKE‘张_’;SELECTFROMexamWHERENAMELIKE‘%%’;--模糊查询 SELECTFROMexamWHEREEnglish\u003e90ANDChinese\u003e90;SELECTFROMexamWHEREEnglish\u003c90orMath\u003e99;--and，or SELECTFROMexamWHEREid=2ORid=3ORid=4;SELECTFROMexamwhereidIN(2,3,4);SELECTFROMexamwhereidnotIN(2,3,4);--in，not in SELECTFROMexamWHEREEnglishBETWEEN90AND100;--between···and SELECTFROMexamORDERBYChineseASC;SELECTFROMexamORDERBYChineseDESC;--order by \u003c-- 如果英语成绩相同,按照汉语成绩降序排列 --\u003e SELECTFROMexamORDERBYEnglishDESC,ChineseDESC;SELECTSUM(English+Math+Chinese)FROMexam;SELECTCOUNT(id)FROMexamWHERENAMEISNOTNULL;SELECTMAX(English)FROMexam;SELECTMIN(English)FROMexam;SELECTAVG(English)FROMexam;--聚合函数 关键字：group by，limit --查询每个部门的最高薪水,只有最高薪水大于15000的记录被显示 SELECTdeptno,MAX(sal)ASmax_salFROMempGROUPBYdeptnoHAVINGmax_sal\u003e=15000;--查询每个部门的平均工资 SELECTdeptno,AVG(sal)FROMempGROUPBYdeptnoHAVINGAVG(sal)\u003e9000;--查看工资最高的前十个职员信息 （页数-1，） SELECT*FROMempORDERBYsalDESCLIMIT0,10; 单表查询 1.DISTINCT用于剔除重复记录 selectname,sal,bonusfromemp;selectdistinctbonusfromemp;-- distinct用于剔除重复记录 2.WHERE条件限定 WHERE子句后面跟的是条件，条件可以有多个，多个条件之间用连接词（or | and）进行连接。 WHERE子句查询语法：SELECT 列名称 | * FROM 表名称 WHERE 列 运算符 值 \" 查询emp表中【总薪资(薪资+奖金)大于3500】的所有员工，显示员工姓名、总薪资 ifnull(列名, 值)函数: 判断指定的列是否包含null值，如果有null值，用第二个值替换null值 selectname,sal+bonusfromempwheresal+bonus\u003e3500;selectname,sal+ifnull(bonus,0)fromempwheresal+ifnull(bonus,0)\u003e3500; 注意查看上面查询结果中的表头，如何将表头中的 sal+bonus 修改为 “总薪资\"使用as可以为表头指定别名（格式：列名 as 别名），另外as可省略 selectnameas姓名,sal+ifnull(bonus,0)as总薪资fromempwheresal+ifnull(bonus,0)\u003e3500;selectname姓名,sal+ifnull(bonus,0)总薪资fromempwheresal+ifnull(bonus,0)\u003e3500; 查询emp表中【薪资在3000和4500之间】的员工，显示员工姓名和薪资 between···and 在…和…之间 selectname,salfromempwheresal\u003e=3000andsal\u003c=4500;selectname,salfromempwheresalbetween3000and4500; 字段约束 主键约束 主键约束：如果为一个列添加了主键约束，那么这个列就是主键，主键的特点是唯一且不能为空。通常情况下，每张表都会有主键。 主键自增策略**当主键为数值类型时，为了方便维护，可以设置主键自增策略（auto_increment），设置了主键自增策略后，数据库会在表中保存一个AUTO_INCREMENT变量值，初始值为1，当需要id值，不需要我们指定值，由数据库负责从AUTO_INCREMENT获取一个id值，作为主键值插入到表中。而且每次用完AUTO_INCREMENT值，都会自增1. AUTO_INCREMENT=1 createtableabc(idintprimarykey","date":"2021-07-23","objectID":"/mysql/:3:1","tags":["sql"],"title":"Mysql数据库入门","uri":"/mysql/"},{"categories":["设置"],"content":"Window环境搭建hugo个人博客 电脑安装并配置Git，尤其是username和email 注册GitHub账号，在GitHub配置ssh验证 配置环境变量 ","date":"2021-07-23","objectID":"/hugoset/:0:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"1.github下载Hugo https://github.com/gohugoio/hugo/releases ","date":"2021-07-23","objectID":"/hugoset/:1:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"配置hugo环境变量,将hugo.exe 配置到系统变量 \" ","date":"2021-07-23","objectID":"/hugoset/:1:1","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"创建站点 hugo new site Myblog1 ","date":"2021-07-23","objectID":"/hugoset/:1:2","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"2.下载主题 cd themes git clone https://github.com/vaga/hugo-theme-LoveIt.git themes/LoveIt 根据主题文档进行简单配置（exampleSite）示例站点 ","date":"2021-07-23","objectID":"/hugoset/:2:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"3.新增文章本地测试 hugo new posts/FileName.md hugo server -t LoveIt --buildDrafts --disableFastRender 访问http://localhost:1313/测试是否可访问 ","date":"2021-07-23","objectID":"/hugoset/:3:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"4.github新建仓库 仓库用于部署站点文件，仓库名设置为用户名+.github.io ，https://Crush-hub.github.io即博客地址 ","date":"2021-07-23","objectID":"/hugoset/:4:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"4.博客部署到远端地址,生成public文件 hugo --theme=LoveIt --baseUrl=\"https://Crush-hub.github.io/\" --buildDrafts ","date":"2021-07-23","objectID":"/hugoset/:5:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"5.将public文件夹推送到github仓库 cd public git init git add . git commit -m \"yyyy/mm/dd-hh:mm\" git remote add origin https://github.com/Crush-hub/Crush-hub.github.io.git git push -u origin master(第一次推送) git push git push -f #强制更新 ","date":"2021-07-23","objectID":"/hugoset/:6:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"6.生成博客 https://crush-hub.github.io 引入图片 第一种方式：图片放置在根目录下的static中，也就是网站的绝对路径 ![](/images/two_images.jpg) 弊端就是写博客时无法看到粘贴的图片 第二种方式：利用PicGo工具搭建图床，将gitee仓库设置为图床。 原理就是PicGo将图片上传到你的gitee仓库，然后返回给你图片的具体地址，这样你用该地址便可以访问到位于仓库的图片了。 ","date":"2021-07-23","objectID":"/hugoset/:7:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"1.下载安装PicGo 访问PicGo release下载操作系统对应安装包，注意不可安装到C:\\Program Files，Typore无法解析该路径 ","date":"2021-07-23","objectID":"/hugoset/:8:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"2.安装npm 由于PicGo的插件需要使用npm进行安装，如果你的电脑上没有安装npm，那么无法安装PicGo插件，npm最低版本为6+ ","date":"2021-07-23","objectID":"/hugoset/:9:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"3.设置PicGo用Gitee作为图床 运行PicGo，单击插件设置，在搜索中输入github，安装搜索结果中的github-plus，如下图所示。 \" 移步gitee并创建一个仓库，仓库名随意，但是必须设置为公开仓库且允许在线编辑，我创建的仓库地址是https://gitee.com/cao-lianjie/pic-go，创建完仓库后创建一个私人令牌，私人令牌是用来允许PicGo访问并更新你的仓库。 访问新建私人令牌PicGo要使用的私人令牌只需要user_info和projects权限，勾选上后提交，gitee将会返回私人令牌的token，保存该token，token只会出现一次，离开页面过后再不会出现。 \" 回到Picgo，点击图床设置-\u003egithubPlus，在设置中填入repo和token，并选择origin为gitee，即可完成设置。 \" ","date":"2021-07-23","objectID":"/hugoset/:10:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"4. 设置Typora 使用PicGo有效避免了使用图片时候的上传-\u003e编写markdown代码的步骤，但是我们能不能把添加到PicGo这一步也省略掉呢？答案当然是可以，Typora内置了使用PicGo自动上传图片的功能，也就是说，在需要使用图片的时候，你只要直接将图片粘贴到Typora就好了，这样就跟使用本地图片的体验毫无差距了。 点击Typora左上角的文件-\u003e偏好设置 在弹出的界面中定位到图像，选择插入图片时选项为上传图片，并勾选对网络位置的图片应用上述规则 设置完成如图所示 \" 选择上传服务为PicGo(app)，点击验证图片上传选项，如果出现如下图所示界面，说明配置已成功，然后你就可以直接在Typora中插入图片了，Typora会自动上传并替换图片地址为网络地址。 \" 如出现以下错误,点击PicGo界面左侧的PicGo设置-\u003e设置Server，并按下图设置 Failed to fetch image-20210721102931206 \" 新增文章 ","date":"2021-07-23","objectID":"/hugoset/:11:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"创建md文件 hugo new posts/FileName.md ","date":"2021-07-23","objectID":"/hugoset/:12:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"本地测试 hugo server -t LoveIt --buildDrafts --disableFastRender ","date":"2021-07-23","objectID":"/hugoset/:13:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"生成public文件 hugo --theme=LoveIt --baseUrl=\"https://Crush-hub.github.io/\" --buildDrafts ","date":"2021-07-23","objectID":"/hugoset/:14:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"推送到github git add . git commit -m \"yyyy/mm/dd-hh:mm\" git push Loveit主题配置问题 ","date":"2021-07-23","objectID":"/hugoset/:15:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"标签与分类参数 LoveIt主题官方前置参数 --- title: \"我的第一篇文章\" #文章标题 subtitle: \"\" #文章副标题 date: 2020-03-04T15:58:26+08:00 #这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 2020-03-04T15:58:26+08:00 #上次修改内容的日期时间 draft: true #如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: \"\" #文章作者 authorLink: \"\" #文章作者的链接 description: \"\" #文章内容的描述 license: \"\" #这篇文章特殊的许可 images: [] #页面图片, 用于 Open Graph 和 Twitter Cards. tags: [] #文章的标签 categories: [] #文章所属的类别 featuredImage: \"\" #文章的特色图片 featuredImagePreview: \"\" #用在主页预览的文章特色图片 hiddenFromHomePage: false #如果设为 true, 这篇文章将不会显示在主页上 hiddenFromSearch: false #如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: false #如果设为 true, 这篇文章会使用 twemoji. lightgallery: true #如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: true #如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: true #如果设为 true, 这篇文章会使用 分数扩展语法 fontawesome: true #如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: true #如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: false #如果设为 true, 在 RSS 中将会显示全文内容. #toc: 和网站配置 中的 params.page.toc 部分相同. #code: 和网站配置 中的 params.page.code 部分相同. #math: 和网站配置 中的 params.page.math 部分相同. #mapbox: 和网站配置 中的 params.page.mapbox 部分相同. #share: 和 网站配置 中的 params.page.share 部分相同. #comment: 和网站配置 中的 params.page.comment 部分相同. #library: 和网站配置中的 params.page.library 部分相同. #seo: 和网站配置中的 params.page.seo 部分相同. toc: enable: true auto: true code: copy: true # ... math: enable: true # ... mapbox: accessToken: \"\" # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- 在博客根目录archetypes文件夹下设置default.md默认标签如下： title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" # date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: enable: true weight: false categories: [\"\"] tags: [\"\"] 新增文章需设置categories和tags标签 ","date":"2021-07-23","objectID":"/hugoset/:16:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"添加友情链接 shortcodes hugo在主目录下layouts没有模板文件时,会找到themes下的layouts文件夹内的模板文件进行渲染. LoveIt/layouts/shortcodes/ 下面新建 friend.html 文件： {{ if .IsNamedParams }} \u003ca target=\"_blank\" href={{ .Get \"url\" }} title={{ .Get \"name\" }} class=\"friendurl\"\u003e \u003cdiv class=\"frienddiv\"\u003e \u003cdiv class=\"frienddivleft\"\u003e \u003cimg class=\"myfriend\" src={{ .Get \"logo\" }} /\u003e \u003c/div\u003e \u003cdiv class=\"frienddivright\"\u003e \u003cdiv class=\"friendname\"\u003e{{ .Get \"name\" }}\u003c/div\u003e \u003cdiv class=\"friendinfo\"\u003e{{ .Get \"word\" }}\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/a\u003e {{ end }} LoveIt/assets/css/_partial/_single/ 下面新建 _friend.scss 文件： .friendurl { text-decoration: none !important; color: black; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15); margin-top: 14px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { height: 92px; margin-top: 10px; width: 48%; display: inline-block !important; border-radius: 5px; background: rgba(255, 255, 255, 0.2); box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, 0.2); } .frienddiv:hover { background: rgba(87, 142, 224, 0.15); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; } .frienddivleft { margin-right: 2px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friendinfo { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 14px; } } LoveIt/assets/css/_page/ 下面修改 _single.scss，引入下面一行： @import \"../_partial/_single/friend\"; Myblog\\content目录下新建friend文件夹，文件夹内新建index.语言.md，配置如下： 友链示例： {{（示例）\u003c friend name=\"Dillon\" url=\"https://github.com/dillonzq/\" logo=\"https://avatars0.githubusercontent.com/u/30786232?s=460\u0026u=5fc878f67c869ce6628cf65121b8d73e1733f941\u0026v=4\" word=\"LoveIt主题作者\" \u003e}} {{\u003c friend name=\"Z字骚年\" url=\"https://zouyx.github.io/\" logo=\"https://avatars.githubusercontent.com/u/3828072?v=4\u0026s=160\" word=\"Joe Zou's Blog\" \u003e}} {{\u003c friend name=\"张其\" url=\"https://blog.csdn.net/u010927340\" logo=\"https://avatars3.githubusercontent.com/u/12484497?v=4\u0026s=160\" word=\"张其的博客\" \u003e}} --- hiddenFromSearch: true --- {{\u003c friend name=\"Z字骚年\" url=\"https://zouyx.github.io/\" logo=\"https://avatars.githubusercontent.com/u/3828072?v=4\u0026s=160\" word=\"Joe Zou's Blog\" \u003e}} {{\u003c friend name=\"张其\" url=\"https://blog.csdn.net/u010927340\" logo=\"https://avatars3.githubusercontent.com/u/12484497?v=4\u0026s=160\" word=\"张其的博客\" \u003e}} ","date":"2021-07-23","objectID":"/hugoset/:17:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"摘要分割符 添加摘要分割符来拆分文章生成摘要.摘要分隔符之前的内容将用作该文章的摘要.注意全部为小写且没有空格. \u003c!- -more- -\u003e ","date":"2021-07-23","objectID":"/hugoset/:18:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"注意和技巧代码框 插值表达式\u003c /admonition note/tip\u003e引入注意代码框/技巧框，示例如下： \u003cadmonitionnote\"怎样选择搜索引擎?\"\u003e以下是两种搜索引擎的对比:*`lunr`:简单,无需同步`index.json`,没有`contentLength`的限制,但占用带宽大且性能低(特别是中文需要一个较大的分词依赖库)*`algolia`:高性能并且占用带宽低,但需要同步`index.json`且有`contentLength`的限制文章内容被`h2`和`h3`HTML标签切分来提高查询效果并且基本实现全文搜索.`contentLength`用来限制`h2`和`h3`HTML标签开头的内容部分的最大长度.\u003c/admonition\u003e 搜索引擎设置 \" {\u003c admonition tip \"关于 algolia 的使用技巧\" \u003e 你需要上传 `index.json` 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 `index.json` 文件但是一个自动化的脚本可能效果更好. [Algolia Atomic](https://github.com/chrisdmacrae/atomic-algolia) 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 `index.json` 文件到对应的 algolia index, 例如 `zh-cn/index.json` 或 `fr/index.json`... \u003c /admonition \u003e \" ","date":"2021-07-23","objectID":"/hugoset/:19:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"开启画廊效果 第一步配置文件设置lightgallery = true，默认前置参数可设置单篇文章是否开启画廊 第二步在 Markdown 语法图片链接后面加个空格和空串，如： ![](https://gitee.com/xx/xx.png \" \") CMS：内容管理系统(Content Management System) 正因为内容的核心地位，所以今天建设网站的技术框架中CMS（内容管理系统）是最为流行的，因为你需要有一个系统不停的发布新的贴近用户的内容，而不是只有一个冰冷的5页的页面和一个电话。 SEO是英文 Search Engine Optimization 的缩写，中文意思“搜索引擎优化”。SEO是指在了解搜索引擎自然排名机制的基础上，对网站进行内部及外部的调整优化，改进网站在搜索引擎中的关键词自然排名，从而获得更多流量，最终达成品牌建设或者产品销售的目的。 不管是百度还是谷歌等百科网站，对于SEO解释都是大同小异，简单来说就是通过一定技术手段提高网站关键词搜索排名获取更多展示，然后从自然搜索结果获得更多网站流量的过程。 ","date":"2021-07-23","objectID":"/hugoset/:20:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"},{"categories":["设置"],"content":"未解决问题 未设置站点统计 未设置评论系统 Git actions 自动部署博客 ","date":"2021-07-23","objectID":"/hugoset/:21:0","tags":["hugo"],"title":"Window环境搭建hugo个人博客","uri":"/hugoset/"}]